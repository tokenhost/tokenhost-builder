import React, { useState, useEffect } from 'react'
import { auth } from '../../lib/db'
import ImageUpload from '../ImageUpload.js'

import { contract, w3 , getMetamaskAddress} from '../../helpers/Web3Helper'

export default function Send(props) {

    {{#if reference_contract}}
      const {{reference_contract}}_address = props.{{reference_contract}}_address
    {{/if}}

  {{#each contract_data.initRules.passIn}}


    {{#if (eq this ../reference_contract)}}
      const [{{this}}, set{{this}}] = useState({{../reference_contract}}_address) {{! loop over the pass in elements contract_data.initRules.passIn}}
    {{else}}
      const [{{this}}, set{{this}}] = useState("") {{! loop over the pass in elements contract_data.initRules.passIn}}
    {{/if}}
  
    {{#if (checkImage @root.contract_data.fields this) }}
      const setValue = (value) => {
        set{{this}}(value);
      }
    {{/if}}
  {{/each}}

  const [errorMessage, setErrorMessage] = useState()
  const [sendStatus, setSendStatus] = useState()
  const [user, setUser] = useState(false)

  useEffect(() => {    
        async function fetch(){
          const address = await getMetamaskAddress()
          setUser(address);
        }
        fetch()
  }, [])

  const mySubmitHandler = async (event) => {
    event.preventDefault()

    {{#each contract_data.initRules.passIn}}
      var {{this}}_value = {{this}}
    {{/each}}

    {{{ unique_getters contract_data all_contracts reference_contract}}}




    {{! loop over the pass in elements contract_data.initRules.passIn}}
    let fail = false;
    if ({{contract_data.initRules.passIn.[0]}} === '') {
      setErrorMessage('Your {{contract_data.initRules.passIn.[0]}} cannot be empty')
      fail = true;
    } 
    if(fail){

    }
    else {
      setSendStatus('Sending')


      contract.methods
        .new_{{contract}}({{add_value contract_data.initRules.passIn}}) {{! loop over the pass in elements contract_data.initRules.passIn}}
        .estimateGas()
        .then((gasEstimate) => {
          contract.methods
            .new_{{contract}}({{add_value contract_data.initRules.passIn}}) {{! loop over the pass in elements contract_data.initRules.passIn}}

// for now just double gas
// TODO look into why its failing

            .send({ gas: gasEstimate*2, from: user})
            .then(() => {
              setSendStatus('')
                {{#each contract_data.initRules.passIn}}
                  {{#if (eq this ../reference_contract)}}
                  {{else}}
                      set{{this}}("")
                  {{/if}}
                {{/each}}
            })
        })
    }
  }
  if (user) {
    return (
      <form className="p-6" onSubmit={mySubmitHandler}>

        {{#if contract_data.initRules.passIn.[1]}}

        {{#each contract_data.initRules.passIn}}


        {{#if (eq this ../reference_contract)}}

            <input type="hidden"
              name="{{this}}"
              value={ {{../reference_contract}}_address    }
            />
        {{else}}

              {{#if (checkImage @root.contract_data.fields this) }}
              <div className="field">
                <label className="label">{{this}}</label>
                <div className="control">
                  <ImageUpload setImage={ ({{this}}) => setValue({{this}}) } user={user} />
                </div>
              </div>
              {{else}}

              <div className="field">
                <label className="label">{{this}}</label>
                <div className="control">
                  <input className="input" type="text" placeholder="Type your {{this}} here..."
                    name="{{this}}"
                    value={ {{this}}    }
                    onChange={(event) => set{{this}}(event.target.value)}
                  />
                </div>
              </div>
              {{/if}}

         {{/if}} 
        {{/each}}  

<div className="field is-grouped">
  <div className="control">
    <input  className={
                sendStatus === 'Sending'
                  ? 'button is-info is-bold'
                  : 'button is-warning has-text-white is-bold'
              }
              type="submit"
              value={sendStatus === 'Sending' ? 'Sharing...' : 'Share'}
              />
  </div>
</div>


        {{else}}

        {{#if (checkImage @root.contract_data.fields @root.contract_data.initRules.passIn.[0]) }}
            {{#each contract_data.initRules.passIn}}
                <div className="field">
                  <label className="label">{{this}}</label>
                  <div className="control">
                    <ImageUpload setImage={ ({{this}}) => setValue({{this}}) } user={user} />
                  </div>
            {{/each}}
        {{else}}
        <div className="field is-grouped">
          <p className="control is-expanded">
            <input
              autoComplete="off"
              className="input"
              placeholder="Type your {{contract_data.initRules.passIn.[0]}} here..."
              type="text"
              name="{{contract_data.initRules.passIn.[0]}}"
              value={ {{contract_data.initRules.passIn.[0]}}    }
              onChange={(event) => set{{contract_data.initRules.passIn.[0]}}(event.target.value)}
              disabled={sendStatus === 'Sending'}
            />
          </p>

        {{/if}}

          <p className="control">
            <input
              className={
                sendStatus === 'Sending'
                  ? 'button is-info is-bold'
                  : 'button is-warning has-text-white is-bold'
              }
              type="submit"
              value={sendStatus === 'Sending' ? 'Sharing...' : 'Share'}
            />
          </p>
          <p>{errorMessage && errorMessage}</p>
        </div>



        {{/if}}
      </form>
    )
  } else {
    return (
      <section className="hero is-warning mb-6">
        <div className="hero-body">
          <div className="container">
            <h3 className="title has-text-centered is-5">Please sign in to create a {{contract}}</h3>
          </div>
        </div>
      </section>
    )
  }
}
